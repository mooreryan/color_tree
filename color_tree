#!/usr/bin/env ruby

# Copyright 2015, 2016 Ryan Moore
# Contact: moorer@udel.edu
#
# color_tree is free software: you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# color_tree is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with color_tree.  If not, see
# <http://www.gnu.org/licenses/>.

Signal.trap("PIPE", "EXIT")

require "set"
require "bio"
require "trollop"
require "abort_if"
require_relative "lib/color_tree"

opts = Trollop.options do
  version VERSION_BANNER

  banner <<-EOS

#{VERSION_BANNER}

  Color branches and edit stuff. Outputs a nexus file for use in
  FigTree.

  Important: When importing into FigTree, when it asks you what to
  name the branch labels, leave it as 'label'.

  Occasionally FigTree will color things when you haven't specifically
  asked it to do so. This is likely due to you having colored branches
  or taxa names with similar rules in the same session. Regardless,
  restart FigTree and try again.

  Note: If things appear to be broken, first try running the
  `convert_line_endings.py` script provided in the `bin` dir on your
  input files.

  Synopsis:

color_tree [-bteh][-r min_bootstrap][-p pattern_f][-n name_map] newick_file

  Dependencies:

    Requires `trollop` and `bio`. Install them with

      gem install trollop
      gem install bio

    `to_phy.rb` and `clean_headers.rb` require `parse_fasta`

      gem install parse_fasta

  Examples:

    Remove all bootstrap values below 0.5:
      color_tree -r 0.5 tree.newick > tree.nexus

    Color branches according to patterns in patterns.txt:
      color_tree -b tree.newick patterns.txt > tree.nexus

    Color branches according to exact matches in patterns.txt
      color_tree -be tree.newick patterns.txt > tree.nexus

    Color branches and taxa names:
      color_tree -bt tree.newick patterns.txt > tree.nexus

    Color taxa names and remove boostrap values < 0.5:
      color_tree -t -r 0.5 tree.newick patterns.txt > tree.nexus

  Pattern file:

    Tab delimited, two columns -> pattern, color

      pattern: a regular expression pattern (case insensitive)

      color: one of red, blue, green, yellow, black, or a hexadecimal
      color code, e.g., #000000.

      If a color other than red, blue, green, yellow, black or a hex
      color code is specified, the value will be black. If no color is
      provided, the value will be black.

      If a name_map is provided, the patterns will search against the
      new names (column 2) in the name_map, not the old_names (column
      1).

    Example:
      _Bacteria	blue
      [ds]sDNA virus	#0FF0FF
      e.*coli	red

    Exact matches:
      If the `-e` flag is passed in the patterns in column 1 will be
      searched against nodes as exact string matches. E.g., `bacteria`
      would match `bacteria`, but not `Bacteria` or `proteobacteria`.


  Name map:

    Tab delimited, two columns -> old_name, new_name

    Within each category, names must be unique.

    If there are unsafe characters in the name, they will be cleaned
    using the same rules as for cleaning the newick file.

    Unlike the pattern_file, old_name is treating as a string and not
    a regex, i.e., exact string matching is used.

    Example:
      1a	Silly apple phage
      2a	Mariprofundus seanii

  Options:
  EOS

  opt(:color_branches, "Color branches?", short: "-b")
  opt(:color_taxa_names, "Color label names?", short: "-t")
  opt(:exact, "Exact pattern matching")
  opt(:remove_bootstraps_below,
      "Remove bootstrap values below given value",
      type: :float)
  opt(:patterns, "Pattern file name", type: :string)
  opt(:name_map, "File with name mappings", type: :string)
  opt(:auto_color, "Specify color scheme for auto coloring",
      type: :string)
  opt(:display_auto_color_options, "Display options for auto coloring")
end

if opts[:display_auto_color_options]
  puts "\n  Choices for --auto-color ..."
  print "  basic, basic_light, basic_dark, funky, funky_light, " +
       "funky_dark\n\n"
  exit
end

auto_color_options =
  ["basic", "basic_light", "basic_dark",
   "funky", "funky_light", "funky_dark",]


if(!opts[:auto_color].nil? &&
   !auto_color_options.include?(opts[:auto_color]))
  puts "\n  Choices for --auto-color ..."
  print "  basic, basic_light, basic_dark, funky, funky_light, " +
        "funky_dark\n\n"

  Trollop.die :auto_color, "#{opts[:auto_color]} is not a valid option"
end

case opts[:auto_color]
when nil
  auto_colors = BASIC
when "basic"
  auto_colors = BASIC
when "basic_light"
  auto_colors = BASIC_LIGHT
when "basic_dark"
  auto_colors = BASIC_DARK
when "funky"
  auto_colors = FUNKY
when "funky_light"
  auto_colors = FUNKY_LIGHT
when "funky_dark"
  auto_colors = FUNKY_DARK
end

# opts[:color_branches] = true
# opts[:color_taxa_names] = true
# opts[:exact] = false
# opts[:patterns] = "test_files/500.patterns_with_name_map"
# opts[:name_map] = "test_files/500.name_map"
# ARGV[0] = "test_files/500.zetas.tre"
newick = check_file ARGV[0], :newick

color_f = nil
if opts[:color_taxa_names] || opts[:color_branches]
  color_f = check_file opts[:patterns], :patterns
end

check = opts[:patterns] &&
        !opts[:color_taxa_names] &&
        !opts[:color_branches]

abort_if check,
         "A pattern file was provided without specifying " +
         "any coloring options"


# if passed color other than one defined, return black
black = "#000000"
red = "#FF1300"
yellow = "#FFD700"
blue = "#5311FF"
green = "#00FF2C"
color2hex = Hash.new "[&!color=\"#{black}\"]"
color2hex.merge!({
                   "black" => "[&!color=\"#{black}\"]",
                   "red" => "[&!color=\"#{red}\"]",
                   "blue" => "[&!color=\"#{blue}\"]",
                   "yellow" => "[&!color=\"#{yellow}\"]",
                   "green" => "[&!color=\"#{green}\"]"
                 })

# check if complementary colors requested
if color_f
  colors = Set.new
  File.open(color_f).each_line do |line|
    _, color = line.chomp.split "\t"

    colors << color
  end

  auto_color = colors.all? { |color| color.match /\A[0-4]\Z/ }
end

# get the color patterns
if color_f
  patterns = {}
  File.open(color_f).each_line do |line|
    pattern, color = line.chomp.split "\t"

    color = "black" if color.nil? || color.empty?

    if opts[:name_map] || opts[:color_taxa_names] || opts[:color_branches]
      pattern = clean_name pattern
    end

    if !opts[:exact]
      pattern = Regexp.new pattern
    end

    if auto_color
      patterns[pattern] = "[&!color=\"#{auto_colors[color]}\"]"
    else
      if hex? color
        patterns[pattern] = "[&!color=\"#{color}\"]"
      else
        patterns[pattern] = color2hex[color]
      end
    end
  end
end

treeio = Bio::FlatFile.open(Bio::Newick, newick)

newick = treeio.next_entry
tree = newick.tree

# do this first cos everything after will use the "new" names
if opts[:name_map]
  name_map = parse_name_map opts[:name_map]

  tree.collect_node! do |node|
    unless node.name.nil?
      # every name is cleaned no matter what
      node.name = clean node.name

      if name_map.has_key?(node.name)
        node.name = name_map[node.name]
      end
    end

    node
  end
end

if opts[:color_taxa_names]
  leaves = tree.leaves.map do |n|
    name = clean_name n.name

    if (color = add_color_to_leaf_branch(patterns, name, opts[:exact]))
      name + color
    else
      name
    end
  end
else
  leaves = tree.leaves.map { |n| clean_name n.name }
end

if opts[:color_branches]
  total = tree.nodes.count
  n = 0
  tree.collect_node! do |node|
    n += 1
    $stderr.printf "Node: %d of %d\r", n, total

    color_nodes patterns, tree, node, opts[:exact]
  end
end
$stderr.puts

if opts[:remove_bootstraps_below]
  tree.collect_node! do |node|
    if node.bootstrap && node.bootstrap < opts[:remove_bootstraps_below]
      node.bootstrap_string = ""
    end

    node
  end
end



tre_str = tree.newick(indent: false).gsub(/'/, '')

nexus = "#NEXUS
begin taxa;
dimensions ntax=#{leaves.count};
taxlabels
#{leaves.join("\n")}
;
end;

begin trees;
  tree tree_1 = [&R] #{tre_str}
end;

#{FIG}"

puts nexus
